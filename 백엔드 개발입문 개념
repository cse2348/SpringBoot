1장 스프링 부트 시작하기

스프링 부트: 자바 웹 프로그램을 더욱 쉽고 빠르게 만들기 위한 도구 - 개발 환경 설정을 간소화

웹 애플리케이션 서버를 내장
JDK : 자바 코드의 번역과 실행을 담당하는 자바 개발 도구
AdoptOpenJDK홈페이지에서 설치 -> 설치완료!
localhost:8080 -> 스프링부트 프로젝트가 실행된 서버에 접속하라는 뜻
클라이언트:서버스를 사용하는 프로그램 또는 컴퓨터
서버: 서비스를 재공하는 프로그램 또는 컴퓨터
localhost:내 컴퓨터
8080:포트번호 (예를 들어 우리 방번호?)
Tomcat : 8080번에서 수행되고 있다는 뜻
hello.html :서버에 요청하는 파일

2장 MVC패턴 이해와 실습

뷰 템플릿: 화면을 담당하는 기술(웹 페이지를 하나의 틀로 만들고 여기에 변수를 삽입해 서로 다른 페이지로 보여주는 기술)
컨트롤러 : 클라이언트의 요청에 따라 서버에서 이를 처리하는 역할
모델: 데이터를 관리하는 역할
컨트롤러->하나의 패키지로 만들기
모델은 컨트롤러의 메서드에서 매개변수로 받아서 옴
서버: 모델,뷰,컨트롤러가 유기적으로 역할을 분담해 클라이언트를 요청
레이아웃: 화면에 요소를 배치하는일

헤더-푸더 레이아웃
샌드위치같은 구조로 상단의 헤더영억에는 사이트 안내를 위한 내비게이션을 넣고
하단의 푸터 영역에는 사이트정보를 넣음

부트스트랩: 웹페이지를 쉽게 만들수 있도록 작성해놓은 코드 모음
-템플릿 파일 만들고 적용하기

3장 게시판 만들고 새글 작성하기: create
폼데이터 :HTML요소인 폼 태그에 실려 전송되는 데이터
(웹브라우저에서 서버로 데이터를 전송할떄 사용)

폼 태그에 실어보낸 데이터는 서버의 컨트롤러가 객체에 담아 받음→ DTO (최종적으로 데이터베이스에 저)
action : URL연결주소를 적어 action=”/a/b”로 설정
→ [localhost:8080/a/b](http://localhost:8080/a/b로) 페이지로 폼데이터를 보낸다는 뜻

데이터베이스 : 데이터를 관리하는 창고
DB는 SQL언어 사용 → JPA사용(자바언어로 DB에 명령을 내리는 도구)

JPA핵심도구
엔티티: 자바 객체를 DB가 이해할수 있게 만든것으로 이를 기반으로 테이블이 만들어짐
리파지터리: 엔티티가 DB속 테이블에 저장및 관리 될수있게하는 인터페이스

1.DTO를 엔티티로 변환하기
2.리파지터리를 이용해 엔티티를 DB에 저장하기

4장 룸복과 리팩터링
룸복: 코드를 간소화해주는 라이브러리
-> 룸복을 사용하면 여러 필수 코드가 반복되는 것을 최소화가능
->println()문을 로깅 기능으로 대체가능

로깅 : 프로그램의 수행과정을 기록으로 남기는것을 말함

리팩터링: 코드의 기능에는 변함이 없이 코드의 구조 또는 성능을 개선하는 작업을 말함
-> 리팩터링하면 코드의 가독성이 좋아지고 길이도 짧아져 개발시간 단축가능

@AllArgsConstrucrot:클래스 안쪽의 모든 필드를 매개변수로 하는 생성자를 만드는 어노테이션
-> 이를 사용하면 클래스 내에 별도의 생성자를 만들지 않아도 됌

@TOString : toString() 메소드를 사용하는것과 똑같은 효과를 냄

@Slf4j :Sample Logging Facade for Java의 약자로 로깅시 사용
->로깅 기능으로 로그를 찍으면 나중에라도 그동안 찍힌 로그를 찾아볼수 있음

5장
데이터 조회과정
1.사용자가 웹 페이지에서 데이터를 조회해달라고 URL요청을 보냄
2.서버의 컨트롤러가 이요청을 받아 해당 URL에서 찾으려는 데이터 정보를 리파지터리에 전달
3.리파지터리는 정보를 가지고 DB에 데이터 조회를 요청
4.DB는 해당 데이터를 찾아 이를 엔티티로 반환
5.반환된 엔티티는 모델을 통해 뷰 템플릿으로 전달
6. 최종적으로 결과 뷰 페이지가 완성되어 사용자 화면에 출력됌

@pathVariable
:URL요청으로 들어온 전달값을 컨트롤러의 매개변수로 가져오는 어노테이션

findByld()
:JPA의 CrudRepoitory가 제공하는 메서드로 특정 엔티티의 id값을 기준으로 데이터를 찾아 Optional 타입으로 반환

findAll() :특정 엔티티를 모두 가져와 Iterable 타입으로 반환

{{#article}}{{/article}}
:뷰 페이지에서 모델에 등록된 article의 사용 범위를 지정할떄 사용하는 머스테치 문법

반환데이터타입 불일치 문제 해결방법

메서드가 반환하는 데이터 타입을 사용자가 작성한 데이터 타입으로 캐스팅
사용자가 작성한 데이터 타입을 메서드가 반환하는 데이터 타입으로 수정
메서드의 반환 데이터 타입을 원하는 타입으로 오버라이딩하기

6장 링크
: 미리 정해놓은 요청을 간편히 전송하는 기능으로 보통 페이지 이동을 위해 사용
HTML의 <a태그 혹은 form>태그로 작성
-> 클라이언트가 링크를 통해 어느 페이지로 이동하겟다고 요청하면 서버가 결과 페이지 응답

리다이렉트
: 클라이언트가 보낸 요청을 마핀후 계속해서 처리할 다음 요청 주소를 재지시
-분리된 기능을 하나의 연속적인 흐름으로 연결할수 있음
-리다이렉트를 받은 클라이언트는 해당 주소로 다시 요청을 보내고 서버는 이에 대한 결과를 응답

뷰파일에 링크걸기
<a herf="URML_주소" / 링크를 걸 대상</a

리다이렉트 정의
return "redirect:URML_주소";

7장 데이터 수정

1단계: 수정 페이지를 만들고 기존 데이터를 불러옴
2단계: 데이터를 수정해 DB에 반영한후 결과를 볼수 있게 상세 페이지로 리다이렉트

HTTP메서드 :클라이언트의 다양한 요청을 메서드를 통해 서버를 보내는 역할
-Post: 데이터 생성 요청
-GET: 데이터 조회 요청
-PATCH(PUT): 데이터 삭제 요청
-DELETE : 데이터 삭제 요청

UPDATE :데이터를 수정할때 사용하는 문
UPDATE 테이블명 SET 속성명=변경할_값 WHERE 조건;

8장 데이터 삭제과정
:클라이언트가 서버로 삭제 요청을 하면 DB에서 해당 데이터를 찾아 삭제하고 클라이언트를 리다이렉트된 페이지로 보냄

RedirectAttributes :리다이렉트 페이지에서 사용할 일회성 데이터를 관리하는 객체

articleRepository.delete() :DB에 접근해 데이터를 삭제할때 사용하는 메서드

DELETE 문 : DB테이블에 저장된 내용을 행 단위로 삭제할떄 사용하는 문
DELETE [FROM] 테이블명 WHERE 조건; --[]: 생략가능

9장
JPA 로깅설정 : 동작시 로그를 보기 위한 설정은 application,properites파일에 작성

기본키: 테이블에 저장된 각 데이터를 유일하게 구분할수 있도록 지정한 속성을 말함
-> 보통 id를 기본키로 많이 사용하는데 @GeneratedValue어노테이션의 전략을 IDENTITY

CRUD와 SQL쿼리
:서버에서 데이터의 생성 조회 수정 삭제등의 CRUD요청을 하면 JPA의 리파지터리가 DB에 해당 요청을 전달

CREATE TABLE 문
: 테이블을 만드는 쿼리로 테이블명,속성명,속성의 자료형, 기본키 등을 설정

CREATE TABLE 테이블명(
속성명1 자료형,
속성명2 자료형,
속성명3 자료형,
PRIMARY KEY (기본키)
);

INSERT문
:테이블에 데이터를 생성하는 쿼리로 한번에 하나 또는 여러 데이터를 삽입가능

INSERT
INTO
테이블명
(속성명1,속성명2,속성명3,....)
VALUES
(값1,값2,값3,....);

SELECT 문
:테이블에 데이터를 조회하는 쿼리로,WHERE절이 없으면 조건없이 모든 데이터를 조회

SELECT
속성명1,속성명2,속성명3
FROM
테이블명
WHERE
조건;

UPDATE문:
테이블에 데이터를 수정하는 쿼리로, WHERE절이 없으면 조건 없이 모든 데이터를 수정

UPDATE
테이블명
SET
속성명=변경할 값
WHERE
조건;

DELETE문
:테이블에서 데이터를 삭제하는 쿼리,WHERE절이 없으면 조건없이 모든 데이터를 삭제하고 빈 테이블만 남음

DELETE
[FROM] --[]:생략가능
테이블명
WHERE
조건;

10장
REST API : 서버자원을 클라이언트에 구애받지 않고 사용할수 있게하는 방식
클라이언트에서 정보를 요청하면 서버는 특정기기에 종속되지 않고 모든 기기에서 토용ㅇ할수 있는 JSON데이터를 응답으로 보냄

JSON 데이터
자바스크립트 방식을 차용한 객체 표현식으로 키와 값의 쌍으로 이루어진 속성값으로 구성
{
"키1":값,
"키2":값,
"키3",:값
음}

실습
->이책에서는 크롬 브라우저 확장 프로그램으로 Talend API Tester를 설치해 REST API동작을 실습

HTTP
클라이언트가 보낸 요청이 성공했는지 실패했는지 알려주는 코드
1XX(정보):요청이 수신돼 처리중
2XX(성공): 요청이 정상적으로 처리됌
3XX(리다이렉션 메시지): 요청을 완료하려면 추가행동이 필요
4XX(클라잉너트 요청 오류): 클라이언트의 요청이 잘못돼 서버 요청 수행할수 없음
5XX(서버 응답 오류):서버 내부에 에러가 발생해 클라이언트 요청에 대해 적절히 수행

HTTP 메세지:
요청과 응답을 실제 텍스트 형식으로 전송됌
시작라인:HTTP 요청 또는 응답 내용이 있음
헤더: HTTP 전송에 필요한 부가정보가 있음
빈라인: 헤더의 끝을 알리는 빈줄로,헤더가 모두 전송되었음을 알림
본문: 실제 전송하는 데이터가 있음

11장
REST는 HTTP URL로 서버의 자원을 명시하고 HTTP메서드로 해당 자원에 대해 CRUD하는것
API는 클라이언트가 서버의 자원을 요청할수 있도록 서버측에 제공하는 인터페이스
:REST를 기반으로 API를 구현한것

REST 컨트롤러
REST API로 설계된 URL요청을 받아 처리하는 컨트롤러
일반 컨트롤러가 뷰 페이지를 반환한다면 REST컨트롤러는 JSON이나 텍스트같은 데이터를 반환

REST 컨트롤러의 특징
@RestController 어노테이션을 붙여 선언
-클라이언트의 데이터 조회,생성,수정,삭제요청을 메서드에 맞게 처리함

ResponseEntity
REST 컨트롤러의 반환형 즉,REST API의 응답을 위해 사용하는 클래스
REST API요청을 받아 응답할떄 이 클래스에 HTTP 상태 코드,헤더,본문을 실어보낼수 있습니다

HttpStatus
:HTTP상태 코드를 관리하는 클래스로 다양한 Enum 타입과 관련된 메서드를 가짐

12장
서비스: 컨트롤러와 리파지터리 사이에 위치하는 계층으로, 서버의 핵심 기능을 처리하는 순서를 총괄
클라이언트가 요청을 보내면 이를 컨트롤러가 받아 서비스로 전달하고 서비스는 정해진 코드 흐름을 따라 처리를 진행
이떄 처리에 필요한 데이터는 리파지터리가 DB에서 가져와 서비스로 반환

트랜잭션
:모두 성공해야하는 일련의 과정으로,쪼갤수 없는 업무 처리의 최소단위 ->보통 서비스단에서 관리

롤백: 트랜잭션 내부에서 실행에 실패하면 지금까지 수행하는 것을 모두 폐기하고 진행 초기 단계로 되돌림

@Service
해당 어노테이션이 선언된 클래스를 서비스로 인식해 서비스 객체를 생성,
컨트롤러는 객체 주입하는 방식으로 서비스를 객체로 사용

@Transactional
해당 어노테이션이 선언된 메서드를 트랜잭션으로 묶음
클래스에서 이 어노테이션을 선언하면 클래스의 모든 메서드 별로 각각의 트랜잭션이 부여됌
-> 처음부터 끝까지 완전히 실행되거나 아예 실행되지않거나 둘중 하나로 동작

13장
테스트: 프로그램의 품질을 검증하는것으로 의도대로 프로그램이 잘 동작하는지 확인하는 과정

테스트 코드 작성법
1.예상 데이터 작성하기
2.실제 데이터 획득하기
3. 예상 데이터와 실제 데이터 비교해 검증하기
프로그램 코드가 테스트를 통과하면 지속적인 리팩터링으로 코드를 개선하고 통과하지 못하면 잘못된 부분을 찾아 고치는 디버깅

테스트 케이스
:테스트는 다양한 경우를 대비해 작성
성공할 경우 뿐만아니라 실패할 경우까지 고려해 작성
더나아가 성공1,성공2,....실패1,실패2와 같이 다양한 상황을 예상해 세부적으로 작성

test 디렉터리 위치
:test 디렉터리는 main디렉터리 아래에 만들어지는데 기존 자바 코드가 담긴 main>java디렉터리와 데칼코마니처럼 test>java디렉터리로 생성

@SpringBootTest
스프링 부트와 해당 클래스를 연동해 테스트할떄 사용하는 어노테이션
테스트 코드에서 스프링 부트가 관리하는 다양한 객체를 주입할수 있음

17장 웹 페이지에서 댓글 등록하기
댓글 등록하기
1.댓글 생성 뷰 페이지에 댓글 입력 폼 만들기
2.[댓글 작성]버튼을 클릭해 REST API 요청 보내기

버튼 변수화
버튼 같은 문서 내 특정 요소를 변수로 받아 오려면 다음과 같이 querySelector()메서드를 사용해 해당 요소를 선택한 후 변수에 저장
자료형 변수명 = document.querySelector("#id_값");

버튼 이벤트 감지
쿨릭,마우스 오버 같이 웹 페이지에서 발생한 특정 이벤트는 addEventListener()메서드를 사용해 감지

댓글 객체 생성
댓글 객체를 자바 스크립트로 만드는 방법은 3가지가 있음
1. 객체 리터럴 방식
2.생성자 함수 방식
3. Object.create()방식

var object = {
key 1: value1,
...
}

REST API 호출과 응답 처리
자스크립트로 REST API 요청을 보낼떄 fetch()함수를 사용
전송 데이터가 자바스크립트 객체이므로 json문자열로 변환해 보내야함

18장 웹 페이지에서 댓글 수정하기

모달
:웹에서 새 창을 띄우는 팝업창과 달리 같은 브라우저 내부에서 상위 레이어를 띄우는 방식으로 사용하는 창
모달 창이 뜨면 기존 창은 비 활성 상태가 되고 모달창을 종료해야만 원래 화면으로 돌아갈수 잇음

댓글 수정하기
1.모달 기능을 이용해 모달 창에 수정 폼 만들기
2. 모달 트리거 버튼을 통해 기존 댓글을 가져와 수정폼에 반영한후 REST API요청 보내기

트리거 전달
1.모달 트리거 버튼에 수정할 댓글 정보를 data- 속성 값으로 저장
2.show.bs.modal 이벤트를 감지해 핸들러에서 모달 트리거 버튼을 변수화한다
3. 버튼 변수를 이용해 data- 속성에 담긴 댓글 정보를 가져옴
4.수정폼에 데이터를 반영

모달이벤트 감지
모달은 열리기 직전 show.bs.modal이벤트를 시키고 이를 처리할 함수는 이벤트를 첫번째 매개변수로 받아 실행

19장 웹 페이지에서 댓글 삭제하기

댓글 삭제하기
[삭제] 버튼 추가하기
[삭제]버튼 클릭해 REST API 요청 보내기
querySelectorAll()
선택자로 지정한 모든 요소를 찾아 반환

forEach()
배열 또는 배열과 유사한 일련의 데이터 묶음을 순회해 처리하는 메서드로 매개변수로 주어진 함수를 배열속 각 요소에 적용해 처리

백틱(` ) 문자열
백틱(`)은 문자열을 정의하는 방법으로 키보드의 숫자 1왼쪽에 있는 키
문자열 사이에 변수를 편리하게 삽입가능
${} 변수 삽입 문법
